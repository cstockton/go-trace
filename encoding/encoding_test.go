package encoding

import (
	"bytes"
	"fmt"
	"io"
	"strings"
	"testing"
	"testing/iotest"

	"github.com/cstockton/go-trace/event"
	"github.com/cstockton/go-trace/internal/tracefile"
)

// @TODO fuzzing with go-fuzz over some of the random byte mutating tests.

var traceList tracefile.TraceList

func init() {
	var err error
	traceList, err = tracefile.Load(`../internal/tracefile`)
	if err != nil {
		panic(err)
	}
}

func runEncodingTest(t *testing.T, tf *tracefile.Trace, b []byte, r io.Reader) {
	t.Run(tf.Version.Go()+`/`+tf.Name, func(t *testing.T) {
		w := new(bytes.Buffer)
		dec, enc := NewDecoder(r), NewEncoder(w)
		for dec.More() {
			off := dec.state.off
			evt := new(event.Event)
			err := dec.Decode(evt)
			if err != nil {
				t.Fatal(err)
			}
			w.Reset()

			// Use the comprehensive decoder testing to prove the Encoder correct
			// through invariant Dec(Enc(Dec(Input)))
			if tf.Version != event.Latest {
				continue
			}

			src := b[off:dec.state.off]
			if err := enc.Emit(evt); err != nil {
				t.Fatalf(`event %v failed with err: %v`, evt, err)
			}
			if exp, got := src, w.Bytes(); !bytes.Equal(exp, got) {
				t.Errorf(`failure for event: %v`, evt)
				t.Fatalf("output deviation was:\n  dec: %v\n  enc: %v", exp, got)
			}
		}
		if err := dec.Err(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestEncoding(t *testing.T) {
	for _, tf := range traceList {
		if tf.Version > event.Latest {
			t.Skipf(`skipping Version %v >= Latest`, tf.Version)
		}

		b := tf.Bytes()
		if b == nil {
			t.Fatal(`expected non-nil data`)
		}

		size := tf.Size
		switch {
		case size < 1e5:
			// test small traces with a couple iotest readers as well.
			runEncodingTest(t, tf, b, iotest.HalfReader(bytes.NewReader(b)))
			runEncodingTest(t, tf, b, iotest.HalfReader(bytes.NewReader(b)))

			// if tf.Version == event.Latest {
			// 	// ensure no panics and touch all paths for UnexpectedEOF.
			// 	t.Run(`UnexpectedEOF`, func(t *testing.T) {
			// 		evt := new(event.Event)
			//
			// 		for i := len(b) - 2; i > 0; i-- {
			// 			dec := NewDecoder(bytes.NewReader(b[0:i]))
			// 			for dec.More() {
			// 				dec.Decode(evt)
			// 				evt.Reset()
			// 			}
			// 		}
			// 	})
			// }
			fallthrough
		case size > 1e5:
			if testing.Short() {
				t.Skipf(`Skipping test size %v in short mode.`, size)
			}

			// test big traces with just a byte reader.
			runEncodingTest(t, tf, b, bytes.NewReader(b))
		}
	}
}

func TestEncodingVersion(t *testing.T) {
	type testEncodingVersion struct {
		exp  event.Version
		from []byte
		err  interface{}
	}
	verFn := func(v string) []byte {
		b := append([]byte("go "+v+" trace"), []byte{0, 0, 0, 0}...)
		return b[:16]
	}
	tests := []testEncodingVersion{
		{1, verFn(`1.5`), nil},
		{2, verFn(`1.7`), nil},
		{3, verFn(`1.8`), nil},
		{4, verFn(`1.9`), nil},
		{4, verFn(`1.10`), nil},
		{5, verFn(`1.11`), nil},
		{0, verFn(`1.8.0`), true},
		{0, verFn(`1.4`), true},
		{0, verFn(`1.4.0`), true},
		{0, []byte("\x00go 1.5 trace\x00\x00\x00"), true},
		{0, []byte("go 1.5 trace\x00 \x00\x00"), true},
		{0, verFn(``), true},
		{0, verFn(` `), true},
		{0, verFn(`   ---`), true},
		{0, verFn(`1.8---`), true},
		{0, make([]byte, 17), true},
		{0, make([]byte, 15), true},
		{0, verFn(`1.8`)[:15], true},
		{0, nil, true},
	}
	for i, test := range tests {
		t.Logf("test #%v exp version %q from:\n%v", i, test.exp, string(test.from))
		var (
			ver event.Version
			err error
			buf bytes.Buffer
		)
		// prove invariant Dec(Enc(Dec(Input)))
		for from, i := test.from, 0; i < 10; i++ {
			dec := NewDecoder(bytes.NewReader(from))
			err = decodeHeader(dec.state)
			if err = chkErr(test.err, err); err != nil {
				t.Fatal(err)
			}

			ver = dec.state.ver
			if test.err != nil {
				if ver.Valid() {
					t.Fatal(`expected invalid version when error is returned`)
				}
				if err = encodeHeader(&buf, ver); err == nil {
					t.Fatalf(`expected err encoding invalid version %q; got nil`, ver)
				}
				continue
			}
			if ver != test.exp {
				t.Fatalf(`expected version %q; got %q`, test.exp, ver)
			}
			if exp, got := string(test.from[3:6]), ver.Go(); exp != got {
				t.Fatalf(`expected Go() value %q; got %q`, exp, got)
			}

			err = encodeHeader(&buf, ver)
			if err != nil {
				t.Fatalf(`expected nil err; got %v`, err)
			}
			copy(from, buf.Bytes())
			if len(from) == 0 {
				t.Fatal(`unexpected zero length data`)
			}
		}
	}
}

// utility funcs

func makeState(t testing.TB, v event.Version, data []byte) *state {
	buf := new(bytes.Buffer)
	buf.Write(makeHeader(t, v))
	buf.Write(data)

	dec := NewDecoder(buf)
	dec.init()
	if dec.err != nil {
		t.Fatal(dec.err)
	}
	return dec.state
}

func makeHeader(t testing.TB, v event.Version) []byte {
	if !v.Valid() {
		t.Fatalf(`invalid version %v:`, v)
	}

	var buf bytes.Buffer
	if err := encodeHeader(&buf, v); err != nil {
		t.Fatal(err)
	}
	return buf.Bytes()
}

func makeEvents(t testing.TB, v event.Version, n int) []byte {
	evts := testEvents[v]

	var buf bytes.Buffer
	for i := 0; i < n; i++ {
		buf.Write(evts[i%len(evts)].from)
	}
	return buf.Bytes()
}

func makeBuffer(t testing.TB, v event.Version, n int) *bytes.Buffer {
	buf := new(bytes.Buffer)
	buf.Write(makeHeader(t, v))
	buf.Write(makeEvents(t, v, n))
	return buf
}

func makeNonZeroBuf(n int) []byte {
	b := make([]byte, n)
	for i := 0; i < n; i++ {
		b[i] = byte(i)
		if b[i] == 0 {
			b[i]++
		}
	}
	return b
}

func chkErr(exp interface{}, err error) error {
	expNil := func(v bool) error {
		if !v && nil == err {
			return fmt.Errorf(`expected non-nil err; got %q`, err)
		} else if v && nil != err {
			return fmt.Errorf(`expected nil err; got %q`, err)
		}
		return nil
	}
	switch T := exp.(type) {
	case error:
		if T != err {
			return fmt.Errorf(`expected err %q; got %q`, T, err)
		}
	case string:
		if !strings.Contains(err.Error(), T) {
			return fmt.Errorf(`expected err to contain %q; got %q`, T, err)
		}
	case int:
		return expNil(0 == T)
	case bool:
		return expNil(!T)
	case nil:
	default:
		return fmt.Errorf(`bad expected value type %T when checking %q`, T, err)
	}
	return nil
}

type rwLimiter struct {
	w   io.Writer
	r   io.Reader
	b   io.ByteReader
	n   int
	off int
	err error
}

func (l *rwLimiter) Write(p []byte) (int, error) {
	if l.err != nil && l.n == 0 {
		return 0, l.err
	}
	if off := l.off + len(p); off > l.n {
		return len(p) / 2, l.err
	}
	n, err := l.w.Write(p)
	l.off += n
	return n, err
}

func (l *rwLimiter) Read(p []byte) (int, error) {
	if l.err != nil && l.n == 0 {
		return 0, l.err
	}
	if off := l.off + len(p); off > l.n {
		return off - l.off, l.err
	}
	n, err := l.r.Read(p)
	l.off += n
	return n, err
}

func (l *rwLimiter) ReadByte() (byte, error) {
	if l.err != nil && l.n == 0 {
		return 0, l.err
	}
	if off := l.off + 1; off > l.n {
		return 0, l.err
	}
	b, err := l.b.ReadByte()
	l.off++
	return b, err
}

type testDecodeEvent struct {
	typ  event.Type
	exp  []uint64
	from []byte
}

var testEventsLatest = testEventsV3

var testEvents = [...][]testDecodeEvent{
	nil, testEventsV1, testEventsV2, testEventsV3, testEventsV4,
}

var testEventsV1 = []testDecodeEvent{
	{event.EvBatch, []uint64{0x0, 0x1, 0xfe5795b9fd80},
		[]byte{0x41, 0x0, 0x1, 0x80, 0xfb, 0xe7, 0xad, 0xf9, 0xca, 0x3f}},
	{event.EvFrequency, []uint64{0x26a7834, 0x0},
		[]byte{0x2, 0xb4, 0xf0, 0xa9, 0x13, 0x0}},
	{event.EvStack, []uint64{0x12, 0x2, 0x402c63, 0x47b83a},
		[]byte{0xc3, 0xa, 0x12, 0x2, 0xe3, 0xd8, 0x80, 0x2, 0xba, 0xf0, 0x9e, 0x2}},
	{event.EvGomaxprocs, []uint64{0x1, 0x28, 0x30, 0x2},
		[]byte{0x84, 0x1, 0x28, 0x30, 0x2}},
	{event.EvProcStart, []uint64{0x1, 0x4, 0x0}, []byte{0x45, 0x1, 0x4, 0x0}},
	{event.EvProcStop, []uint64{0x5, 0x32}, []byte{0x6, 0x5, 0x32}},
	{event.EvGCStart, []uint64{0x1, 0x23, 0x8}, []byte{0x47, 0x1, 0x23, 0x8}},
	{event.EvGCDone, []uint64{0x1, 0x15}, []byte{0x8, 0x1, 0x15}},
	{event.EvGCSTWStart, []uint64{0x6, 0x8d8}, []byte{0x9, 0x6, 0xd8, 0x11}},
	{event.EvGCSTWDone, []uint64{0x8, 0x2b52}, []byte{0xa, 0x8, 0xd2, 0x56}},
	{event.EvGCSweepStart, []uint64{0x1, 0x21, 0xa}, []byte{0x4b, 0x1, 0x21, 0xa}},
	{event.EvGCSweepDone, []uint64{0x1, 0x57}, []byte{0xc, 0x1, 0x57}},
	{event.EvGoCreate, []uint64{0x0, 0x0, 0x1, 0x42d0a0, 0x1},
		[]byte{0xcd, 0x8, 0x0, 0x0, 0x1, 0xa0, 0xa1, 0x8b, 0x2, 0x1}},
	{event.EvGoStart, []uint64{0x1, 0x3, 0x1}, []byte{0x4e, 0x1, 0x3, 0x1}},
	{event.EvGoEnd, []uint64{0x25, 0x13d}, []byte{0xf, 0x25, 0xbd, 0x2}},
	{event.EvGoStop, []uint64{0x1, 0x12, 0x44}, []byte{0x50, 0x1, 0x12, 0x44}},
	{event.EvGoSched, []uint64{0xb, 0x59b, 0x53}, []byte{0x51, 0xb, 0x9b, 0xb, 0x53}},
	{event.EvGoPreempt, []uint64{0x8, 0xa6f, 0x45},
		[]byte{0x52, 0x8, 0xef, 0x14, 0x45}},
	{event.EvGoSleep, []uint64{0x1, 0x16, 0x10}, []byte{0x53, 0x1, 0x16, 0x10}},
	{event.EvGoBlock, []uint64{0x1, 0x37, 0xc}, []byte{0x54, 0x1, 0x37, 0xc}},
	{event.EvGoUnblock, []uint64{0x3, 0xb6, 0xd8, 0x0},
		[]byte{0x95, 0x3, 0xb6, 0x1, 0xd8, 0x1, 0x0}},
	{event.EvGoBlockSend, []uint64{0x1, 0xa5, 0x4d},
		[]byte{0x56, 0x1, 0xa5, 0x1, 0x4d}},
	{event.EvGoBlockRecv, []uint64{0x1, 0x4c, 0x7}, []byte{0x57, 0x1, 0x4c, 0x7}},
	{event.EvGoBlockSelect, []uint64{0x1, 0x4c, 0x7}, []byte{0x58, 0x1, 0x4c, 0x7}},
	{event.EvGoBlockSync, []uint64{0x4b, 0x291, 0x23},
		[]byte{0x59, 0x4b, 0x91, 0x5, 0x23}},
	{event.EvGoBlockCond, []uint64{0x4b, 0x291, 0x23},
		[]byte{0x5a, 0x4b, 0x91, 0x5, 0x23}},
	{event.EvGoBlockNet, []uint64{0x30, 0x7a9, 0x1b},
		[]byte{0x5b, 0x30, 0xa9, 0xf, 0x1b}},
	{event.EvGoSysCall, []uint64{0x1, 0x6e9, 0x4}, []byte{0x5c, 0x1, 0xe9, 0xd, 0x4}},
	{event.EvGoSysExit, []uint64{0x1, 0x80, 0x72, 0x710, 0xfe5795bb1d9d},
		[]byte{0xdd, 0xd, 0x1, 0x80, 0x1, 0x72, 0x90, 0xe, 0x9d, 0xbb,
			0xec, 0xad, 0xf9, 0xca, 0x3f}},
	{event.EvGoSysBlock, []uint64{0x2, 0x184}, []byte{0x1e, 0x2, 0x84, 0x3}},
	{event.EvGoWaiting, []uint64{0x1, 0x3c, 0x2}, []byte{0x5f, 0x1, 0x3c, 0x2}},
	{event.EvGoInSyscall, []uint64{0x1, 0x1d, 0x19}, []byte{0x60, 0x1, 0x1d, 0x19}},
	{event.EvHeapAlloc, []uint64{0x4, 0x6b9, 0x67d70},
		[]byte{0x61, 0x4, 0xb9, 0xd, 0xf0, 0xfa, 0x19}},
	{event.EvNextGC, []uint64{0x1, 0x5, 0x400000},
		[]byte{0x62, 0x1, 0x5, 0x80, 0x80, 0x80, 0x2}},
	{event.EvTimerGoroutine, []uint64{0x12, 0x0}, []byte{0x23, 0x12, 0x0}},
	{event.EvFutileWakeup, []uint64{0x12, 0x0}, []byte{0x24, 0x12, 0x0}},
}

var testEventsV2 = []testDecodeEvent{
	{event.EvBatch, []uint64{0x0, 0xfe5795b9fd80},
		[]byte{0x41, 0x0, 0x80, 0xfb, 0xe7, 0xad, 0xf9, 0xca, 0x3f}},
	{event.EvFrequency, []uint64{0x23c496b}, []byte{0x2, 0xeb, 0x92, 0xf1, 0x11}},
	{event.EvStack, []uint64{0xa, 0x1, 0x4190f1, 0x51, 0x52, 0x58e}, []byte{
		0xc3, 0xa, 0xa, 0x1, 0xf1, 0xa1, 0x86, 0x2, 0x51, 0x52, 0x8e, 0xb}},
	{event.EvGomaxprocs, []uint64{0xb4, 0x18, 0x7},
		[]byte{0x84, 0xb4, 0x1, 0x18, 0x7}},
	// Stack is separate test
	{event.EvProcStart, []uint64{0xb, 0x0}, []byte{0x45, 0xb, 0x0}},
	{event.EvProcStop, []uint64{0xc7}, []byte{0x6, 0xc7, 0x1}},
	{event.EvGCStart, []uint64{0x1782, 0x7, 0x1a},
		[]byte{0x87, 0x82, 0x2f, 0x7, 0x1a}},
	{event.EvGCDone, []uint64{0x1a}, []byte{0x8, 0x1a}},
	{event.EvGCSTWStart, []uint64{0x3af}, []byte{0x9, 0xaf, 0x7}},
	{event.EvGCSTWDone, []uint64{0x341c}, []byte{0xa, 0x9c, 0x68}},
	{event.EvGCSweepStart, []uint64{0x35, 0x22}, []byte{0x4b, 0x35, 0x22}},
	{event.EvGCSweepDone, []uint64{0x72}, []byte{0xc, 0x72}},
	{event.EvGoCreate, []uint64{0x0, 0x1, 0x2, 0x1},
		[]byte{0xcd, 0x4, 0x0, 0x1, 0x2, 0x1}},
	{event.EvGoStart, []uint64{0x9d2, 0x5, 0x1}, []byte{0x8e, 0xd2, 0x13, 0x5, 0x1}},
	{event.EvGoEnd, []uint64{0x120}, []byte{0xf, 0xa0, 0x2}},
	{event.EvGoStop, []uint64{0x18, 0x5d}, []byte{0x50, 0x18, 0x5d}},
	{event.EvGoSched, []uint64{0x33b, 0x12}, []byte{0x51, 0xbb, 0x6, 0x12}},
	{event.EvGoPreempt, []uint64{0x2b0, 0x15}, []byte{0x52, 0xb0, 0x5, 0x15}},
	{event.EvGoSleep, []uint64{0x2b, 0xf}, []byte{0x53, 0x2b, 0xf}},
	{event.EvGoBlock, []uint64{0x2e, 0xb}, []byte{0x54, 0x2e, 0xb}},
	{event.EvGoUnblock, []uint64{0x39, 0x5, 0x2, 0x0},
		[]byte{0xd5, 0x4, 0x39, 0x5, 0x2, 0x0}},
	{event.EvGoBlockSend, []uint64{0x26b, 0xe}, []byte{0x56, 0xeb, 0x4, 0xe}},
	{event.EvGoBlockRecv, []uint64{0x19c6, 0x41}, []byte{0x57, 0xc6, 0x33, 0x41}},
	{event.EvGoBlockSelect, []uint64{0x123, 0x6f}, []byte{0x58, 0xa3, 0x2, 0x6f}},
	{event.EvGoBlockSync, []uint64{0x3b, 0x1a}, []byte{0x59, 0x3b, 0x1a}},
	{event.EvGoBlockCond, []uint64{0x46e, 0x250d},
		[]byte{0x5a, 0xee, 0x8, 0x8d, 0x4a}},
	{event.EvGoBlockNet, []uint64{0xbb3, 0x4c}, []byte{0x5b, 0xb3, 0x17, 0x4c}},
	{event.EvGoSysCall, []uint64{0xfe, 0x10}, []byte{0x5c, 0xfe, 0x1, 0x10}},
	{event.EvGoSysExit, []uint64{0x8, 0x5, 0x2, 0x0},
		[]byte{0xdd, 0x4, 0x8, 0x5, 0x2, 0x0}},
	{event.EvGoSysBlock, []uint64{0x653}, []byte{0x1e, 0xd3, 0xc}},
	{event.EvGoWaiting, []uint64{0x8, 0x2}, []byte{0x5f, 0x8, 0x2}},
	{event.EvGoInSyscall, []uint64{0x13, 0x11}, []byte{0x60, 0x13, 0x11}},
	{event.EvHeapAlloc, []uint64{0x2fd, 0xd6000},
		[]byte{0x61, 0xfd, 0x5, 0x80, 0xc0, 0x35}},
	{event.EvNextGC, []uint64{0xa, 0x48f660},
		[]byte{0x62, 0xa, 0xe0, 0xec, 0xa3, 0x2}},
	{event.EvTimerGoroutine, []uint64{0x8}, []byte{0x23, 0x8}},
	{event.EvFutileWakeup, []uint64{0x1a}, []byte{0x24, 0x1a}},
	// String is separate test
	{event.EvGoStartLocal, []uint64{0xc, 0x1}, []byte{0x66, 0xc, 0x1}},
	{event.EvGoUnblockLocal, []uint64{0x42, 0x1, 0xf}, []byte{0xa7, 0x42, 0x1, 0xf}},
	{event.EvGoSysExitLocal, []uint64{0x3039, 0x64, 0x1a85},
		[]byte{0xa8, 0xb9, 0x60, 0x64, 0x85, 0x35}},
}

var testEventsV3 = append(testEventsV2, []testDecodeEvent{
	{event.EvGoStartLabel, []uint64{0xb3, 0x23, 0x3, 0x1},
		[]byte{0xe9, 0x5, 0xb3, 0x1, 0x23, 0x3, 0x1}},
	{event.EvGoBlockGC, []uint64{0xc42, 0x2a}, []byte{0x6a, 0xc2, 0x18, 0x2a}},
}...)

var testEventsV4 = append(testEventsV3, []testDecodeEvent{
	{event.EvGCMarkAssistStart, []uint64{0xc42, 0x2a}, []byte{0x6b, 0xc2, 0x18, 0x2a}},
	{event.EvGCMarkAssistDone, []uint64{0x1}, []byte{0x2c, 0x1}},
}...)

var testEventsV5 = append(testEventsV3, []testDecodeEvent{
	{event.EvGCMarkAssistStart, []uint64{0xc42, 0x2a}, []byte{0x6b, 0xc2, 0x18, 0x2a}},
	{event.EvGCMarkAssistDone, []uint64{0x1}, []byte{0x2c, 0x1}},
}...)

type testEventString struct {
	id   int
	exp  string
	from []byte
}

var testEventStrings = []testEventString{
	{1, "GC (dedicated)",
		[]byte{0x25, 0x1, 0xe, 0x47, 0x43, 0x20, 0x28, 0x64, 0x65, 0x64, 0x69, 0x63,
			0x61, 0x74, 0x65, 0x64, 0x29}},
	{2, "GC (fractional)",
		[]byte{0x25, 0x2, 0xf, 0x47, 0x43, 0x20, 0x28, 0x66, 0x72, 0x61, 0x63, 0x74,
			0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29}},
	{3, "GC (idle)",
		[]byte{0x25, 0x3, 0x9, 0x47, 0x43, 0x20, 0x28, 0x69, 0x64, 0x6c, 0x65,
			0x29}},
	{4, "runtime.timerproc",
		[]byte{0x25, 0x4, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
			0x74, 0x69, 0x6d, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x63}},
	{5, "/one/ws/godev/go/src/runtime/time.go",
		[]byte{0x25, 0x5, 0x24, 0x2f, 0x6f, 0x6e, 0x65, 0x2f, 0x77, 0x73, 0x2f,
			0x67, 0x6f, 0x64, 0x65, 0x76, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63,
			0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d,
			0x65, 0x2e, 0x67, 0x6f}},
	{6, "runtime/trace.Start.func1",
		[]byte{0x25, 0x6, 0x19, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
			0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2e,
			0x66, 0x75, 0x6e, 0x63, 0x31}},
	{7, "/one/ws/godev/go/src/runtime/trace/trace.go",
		[]byte{0x25, 0x7, 0x2b, 0x2f, 0x6f, 0x6e, 0x65, 0x2f, 0x77, 0x73, 0x2f,
			0x67, 0x6f, 0x64, 0x65, 0x76, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63,
			0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x74, 0x72, 0x61,
			0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x67, 0x6f}},
}

type testEventStack struct {
	exp  []uint64
	from []byte
}

var testEventStacks = []testEventStack{
	{[]uint64{0x12, 0x5, 0x42f881, 0x54, 0x44, 0x3a8, 0x4494ee, 0x55,
		0x30, 0x100, 0x4badd2, 0x8, 0x7, 0x17, 0x5564c3, 0x9, 0xa, 0x182,
		0x4c0fc3, 0xb, 0xc, 0x290},
		[]byte{0xc3, 0x29, 0x12, 0x5, 0x81, 0xf1, 0x8b, 0x2, 0x54, 0x44, 0xa8,
			0x7, 0xee, 0xa9, 0x92, 0x2, 0x55, 0x30, 0x80, 0x2, 0xd2, 0xdb, 0xae,
			0x2, 0x8, 0x7, 0x17, 0xc3, 0xc9, 0xd5, 0x2, 0x9, 0xa, 0x82, 0x3, 0xc3,
			0x9f, 0xb0, 0x2, 0xb, 0xc, 0x90, 0x5}},
	{[]uint64{0xa, 0x1, 0x4190f1, 0x51, 0x52, 0x58e}, []byte{
		0xc3, 0xa, 0xa, 0x1, 0xf1, 0xa1, 0x86, 0x2, 0x51, 0x52, 0x8e, 0xb}},
	{[]uint64{0x11, 0x1, 0x557e41, 0x53, 0xa, 0x149}, []byte{
		0xc3, 0xa, 0x11, 0x1, 0xc1, 0xfc, 0xd5, 0x2, 0x53, 0xa, 0xc9, 0x2}},
	{[]uint64{0xb, 0x1, 0x557ab1, 0x5b, 0xa, 0xe6}, []byte{
		0xc3, 0xa, 0xb, 0x1, 0xb1, 0xf5, 0xd5, 0x2, 0x5b, 0xa, 0xe6, 0x1}},
	{[]uint64{0x1c, 0x9, 0x468f1d, 0x59, 0xe, 0x644, 0x467178, 0x5a, 0x10, 0xde,
		0x5410ce, 0x2a, 0x14, 0xa5, 0x54068a, 0x15, 0x14, 0x4f, 0x538889, 0x16,
		0x17, 0xa1, 0x543c39, 0x2b, 0x19, 0x9c, 0x5429b0, 0x2c, 0x2d, 0x127,
		0x5240e8, 0x2e, 0x1c, 0x22e, 0x5583cf, 0x21, 0xa, 0x15b},
		[]byte{0xc3, 0x49, 0x1c, 0x9, 0x9d, 0x9e, 0x9a, 0x2, 0x59, 0xe, 0xc4, 0xc,
			0xf8, 0xe2, 0x99, 0x2, 0x5a, 0x10, 0xde, 0x1, 0xce, 0xa1, 0xd0, 0x2,
			0x2a, 0x14, 0xa5, 0x1, 0x8a, 0x8d, 0xd0, 0x2, 0x15, 0x14, 0x4f, 0x89,
			0x91, 0xce, 0x2, 0x16, 0x17, 0xa1, 0x1, 0xb9, 0xf8, 0xd0, 0x2, 0x2b,
			0x19, 0x9c, 0x1, 0xb0, 0xd3, 0xd0, 0x2, 0x2c, 0x2d, 0xa7, 0x2, 0xe8,
			0x81, 0xc9, 0x2, 0x2e, 0x1c, 0xae, 0x4, 0xcf, 0x87, 0xd6, 0x2, 0x21,
			0xa, 0xdb, 0x2}},
	{[]uint64{0x2, 0x1, 0x42cf21, 0x58, 0x44, 0x6a},
		[]byte{0xc3, 0x9, 0x2, 0x1, 0xa1, 0x9e, 0x8b, 0x2, 0x58, 0x44, 0x6a}},
	{[]uint64{0xc, 0x1, 0x557bf1, 0x22, 0xa, 0x118},
		[]byte{0xc3, 0xa, 0xc, 0x1, 0xf1, 0xf7, 0xd5, 0x2, 0x22, 0xa, 0x98, 0x2}},
}
